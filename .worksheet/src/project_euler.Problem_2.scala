package project_euler

import scala.annotation.tailrec

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * */

object Problem_2 {;import org.scalaide.worksheet.runtime.library.WorksheetSupport._; def main(args: Array[String])=$execute{;$skip(435); 
	
  val limit = 4000000L;System.out.println("""limit  : Long = """ + $show(limit ));$skip(204); 
  
 def fibLoop():Long =
  {
	  var x = 1L
	  var y = 2L
	  var sum = 0L
	  var swap = 0L
  
	  while(x < limit)
	  {
	    if(x % 2 ==0) sum +=x
	    swap = x
	    x = y
	    y = swap + x
	  }
	  sum
  };System.out.println("""fibLoop: ()Long""");$skip(156); 
 def fib:Int = {
   lazy val fs: Stream[Int] = 0 #:: 1 #:: fs.zip(fs.tail).map(p => p._1 + p._2)
   fs.view.takeWhile(_ <= limit).filter(_ % 2 == 0).sum
 };System.out.println("""fib: => Int""");$skip(32); 
 
   val t1 = System.nanoTime();System.out.println("""t1  : Long = """ + $show(t1 ));$skip(17); 
   val res = fib;System.out.println("""res  : Int = """ + $show(res ));$skip(43); 
   val t2 = (System.nanoTime() - t1 )/1000;System.out.println("""t2  : Long = """ + $show(t2 ));$skip(54); 
   println(s"The result is: $res time taken $t2 ms ")}

}
